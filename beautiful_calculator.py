{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6cc9bc48-c4ae-4933-a063-541a6fdb2081",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox, font\n",
    "import math\n",
    "import requests\n",
    "\n",
    "# Function to update the input field\n",
    "def update_input(value):\n",
    "    current_text = input_field.get()\n",
    "    input_field.delete(0, tk.END)\n",
    "    input_field.insert(0, current_text + value)\n",
    "\n",
    "# Function to clear the input field\n",
    "def clear_input():\n",
    "    input_field.delete(0, tk.END)\n",
    "\n",
    "# Function to evaluate the expression\n",
    "def calculate():\n",
    "    try:\n",
    "        expression = input_field.get()\n",
    "        result = eval(expression)\n",
    "        input_field.delete(0, tk.END)\n",
    "        input_field.insert(0, str(result))\n",
    "        history_listbox.insert(tk.END, f\"{expression} = {result}\")\n",
    "    except Exception as e:\n",
    "        input_field.delete(0, tk.END)\n",
    "        input_field.insert(0, \"Error\")\n",
    "\n",
    "# Function to handle scientific functions\n",
    "def scientific_function(func):\n",
    "    try:\n",
    "        value = float(input_field.get())\n",
    "        if func == \"sqrt\":\n",
    "            result = math.sqrt(value)\n",
    "        elif func == \"sin\":\n",
    "            result = math.sin(math.radians(value))\n",
    "        elif func == \"cos\":\n",
    "            result = math.cos(math.radians(value))\n",
    "        elif func == \"tan\":\n",
    "            result = math.tan(math.radians(value))\n",
    "        elif func == \"log\":\n",
    "            result = math.log10(value)\n",
    "        elif func == \"ln\":\n",
    "            result = math.log(value)\n",
    "        elif func == \"exp\":\n",
    "            result = math.exp(value)\n",
    "        input_field.delete(0, tk.END)\n",
    "        input_field.insert(0, str(result))\n",
    "        history_listbox.insert(tk.END, f\"{func}({value}) = {result}\")\n",
    "    except Exception as e:\n",
    "        input_field.delete(0, tk.END)\n",
    "        input_field.insert(0, \"Error\")\n",
    "\n",
    "# Function to convert currency\n",
    "def convert_currency():\n",
    "    try:\n",
    "        amount = float(input_field.get())\n",
    "        from_currency = from_currency_var.get()\n",
    "        to_currency = to_currency_var.get()\n",
    "        url = f\"https://api.exchangerate-api.com/v4/latest/{from_currency}\"\n",
    "        response = requests.get(url)\n",
    "        data = response.json()\n",
    "        rate = data['rates'][to_currency]\n",
    "        converted_amount = amount * rate\n",
    "        input_field.delete(0, tk.END)\n",
    "        input_field.insert(0, str(converted_amount))\n",
    "        history_listbox.insert(tk.END, f\"{amount} {from_currency} = {converted_amount} {to_currency}\")\n",
    "    except Exception as e:\n",
    "        input_field.delete(0, tk.END)\n",
    "        input_field.insert(0, \"Error\")\n",
    "\n",
    "# Create the main window\n",
    "root = tk.Tk()\n",
    "root.title(\"Advanced Calculator\")\n",
    "\n",
    "# Set background color and font\n",
    "root.configure(bg=\"#2E3440\")  # Dark background color\n",
    "custom_font = font.Font(family=\"Helvetica\", size=12, weight=\"bold\")\n",
    "\n",
    "# Create an input field\n",
    "input_field = tk.Entry(root, width=50, borderwidth=5, font=custom_font, bg=\"#4C566A\", fg=\"#ECEFF4\")\n",
    "input_field.grid(row=0, column=0, columnspan=6, padx=10, pady=10)\n",
    "\n",
    "# Define buttons for basic operations\n",
    "basic_buttons = [\n",
    "    ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),\n",
    "    ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),\n",
    "    ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),\n",
    "    ('0', 4, 0), ('.', 4, 1), ('C', 4, 2), ('+', 4, 3),\n",
    "    ('(', 5, 0), (')', 5, 1), ('=', 5, 2)\n",
    "]\n",
    "\n",
    "# Create and place basic buttons\n",
    "for (text, row, col) in basic_buttons:\n",
    "    if text == '=':\n",
    "        button = tk.Button(root, text=text, padx=20, pady=20, font=custom_font, bg=\"#5E81AC\", fg=\"#ECEFF4\", command=calculate)\n",
    "        button.grid(row=row, column=col, columnspan=2)\n",
    "    elif text == 'C':\n",
    "        button = tk.Button(root, text=text, padx=20, pady=20, font=custom_font, bg=\"#BF616A\", fg=\"#ECEFF4\", command=clear_input)\n",
    "        button.grid(row=row, column=col)\n",
    "    else:\n",
    "        button = tk.Button(root, text=text, padx=20, pady=20, font=custom_font, bg=\"#4C566A\", fg=\"#ECEFF4\", command=lambda t=text: update_input(t))\n",
    "        button.grid(row=row, column=col)\n",
    "\n",
    "# Define buttons for scientific functions\n",
    "scientific_buttons = [\n",
    "    ('√', 1, 4), ('sin', 1, 5),\n",
    "    ('cos', 2, 4), ('tan', 2, 5),\n",
    "    ('log', 3, 4), ('ln', 3, 5),\n",
    "    ('exp', 4, 4), ('π', 4, 5)\n",
    "]\n",
    "\n",
    "# Create and place scientific buttons\n",
    "for (text, row, col) in scientific_buttons:\n",
    "    if text == 'π':\n",
    "        button = tk.Button(root, text=text, padx=20, pady=20, font=custom_font, bg=\"#5E81AC\", fg=\"#ECEFF4\", command=lambda: update_input(str(math.pi)))\n",
    "    else:\n",
    "        button = tk.Button(root, text=text, padx=20, pady=20, font=custom_font, bg=\"#5E81AC\", fg=\"#ECEFF4\", command=lambda t=text: scientific_function(t.lower()))\n",
    "    button.grid(row=row, column=col)\n",
    "\n",
    "# Currency conversion section\n",
    "from_currency_var = tk.StringVar(value=\"USD\")\n",
    "to_currency_var = tk.StringVar(value=\"EUR\")\n",
    "\n",
    "from_currency_menu = tk.OptionMenu(root, from_currency_var, \"USD\", \"EUR\", \"GBP\", \"JPY\", \"INR\")\n",
    "to_currency_menu = tk.OptionMenu(root, to_currency_var, \"USD\", \"EUR\", \"GBP\", \"JPY\", \"INR\")\n",
    "\n",
    "from_currency_menu.config(bg=\"#4C566A\", fg=\"#ECEFF4\", font=custom_font)\n",
    "to_currency_menu.config(bg=\"#4C566A\", fg=\"#ECEFF4\", font=custom_font)\n",
    "\n",
    "from_currency_menu.grid(row=6, column=0, padx=10, pady=10)\n",
    "to_currency_menu.grid(row=6, column=1, padx=10, pady=10)\n",
    "\n",
    "convert_button = tk.Button(root, text=\"Convert\", padx=20, pady=20, font=custom_font, bg=\"#5E81AC\", fg=\"#ECEFF4\", command=convert_currency)\n",
    "convert_button.grid(row=6, column=2, columnspan=2, padx=10, pady=10)\n",
    "\n",
    "# History section\n",
    "history_label = tk.Label(root, text=\"History:\", font=custom_font, bg=\"#2E3440\", fg=\"#ECEFF4\")\n",
    "history_label.grid(row=7, column=0, columnspan=6, padx=10, pady=10)\n",
    "\n",
    "history_listbox = tk.Listbox(root, width=50, height=10, font=custom_font, bg=\"#4C566A\", fg=\"#ECEFF4\")\n",
    "history_listbox.grid(row=8, column=0, columnspan=6, padx=10, pady=10)\n",
    "\n",
    "# Run the application\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98eafebf-b1c9-4044-9a36-8fdd2f29ca0f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
